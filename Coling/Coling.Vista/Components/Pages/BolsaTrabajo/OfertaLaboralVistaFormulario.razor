@inject SweetAlertService Swal
@inject IInstitucionService instituciones
<NavigationLock OnBeforeInternalNavigation="AntesDeNavegarInternamente"></NavigationLock>
<EditForm EditContext="contextoEdicion" OnValidSubmit="OnValidSubmit" class="container">
    <DataAnnotationsValidator />
    <div class="container">
        <h3 class="mb-4">Agregar Oferta Laboral</h3>

        <div class="row mb-3">
            <label for="idInstitucion" class="col-sm-2 col-form-label">ID Institución</label>
            <div class="col-sm-10">
            <input type="text" class="form-control" id="idInstitucion" @bind="oferta.IdInstitucion" placeholder="Ingrese ID Institución">
            </div>
            @*<select>
                @foreach (var item in institucions)
                {
                    <option value="@item.RowKey">@item.Nombre</option>
                }
            </select>*@
        </div>

        <div class="row mb-3">
            <label for="fechaOferta" class="col-sm-2 col-form-label">Fecha de Oferta</label>
            <div class="col-sm-10">
                <input type="date" class="form-control" id="fechaOferta" @bind="oferta.FechaOferta">
            </div>
        </div>

        <div class="row mb-3">
            <label for="fechaLimite" class="col-sm-2 col-form-label">Fecha Límite</label>
            <div class="col-sm-10">
                <input type="date" class="form-control" id="fechaLimite" @bind="oferta.FechaLimite">
            </div>
        </div>

        <div class="row mb-3">
            <label for="descripcion" class="col-sm-2 col-form-label">Descripción</label>
            <div class="col-sm-10">
                <textarea class="form-control" id="descripcion" @bind="oferta.Descripcion" rows="3" placeholder="Ingrese la descripción"></textarea>
            </div>
        </div>

        <div class="row mb-3">
            <label for="tituloCargo" class="col-sm-2 col-form-label">Título del Cargo</label>
            <div class="col-sm-10">
                <input type="text" class="form-control" id="tituloCargo" @bind="oferta.TituloCargo" placeholder="Ingrese Título del Cargo">
            </div>
        </div>

        <div class="row mb-3">
            <label for="tipoTrabajo" class="col-sm-2 col-form-label">Tipo de Trabajo</label>
            <div class="col-sm-10">
                <input type="text" class="form-control" id="tipoTrabajo" @bind="oferta.TipoTrabajo" placeholder="Ingrese Tipo de Trabajo">
            </div>
        </div>

        <div class="row mb-3">
            <label for="area" class="col-sm-2 col-form-label">Área</label>
            <div class="col-sm-10">
                <input type="text" class="form-control" id="area" @bind="oferta.Area" placeholder="Ingrese Área">
            </div>
        </div>

        <div class="row mb-3">
            <label for="caracteristicas" class="col-sm-2 col-form-label">Características</label>
            <div class="col-sm-10">
                <input type="text" class="form-control" id="caracteristicas" @bind="oferta.Caracteristicas" placeholder="Ingrese Características">
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-sm-10 offset-sm-2">
                <div class="d-md-flex justify-content-end">
                    <button type="submit" class="btn btn-primary me-3"><i class='bx bxs-save me-1'></i>Guardar</button>
                    <button type="button" class="btn btn-danger" @onclick="Cancelar"><i class='bx bxs-x-circle me-1'></i>Cancelar</button>
                </div>
            </div>
        </div>
    </div>

</EditForm>

@code {
    public List<Institucion> institucions { get; set; } = new List<Institucion>();

    private EditContext contextoEdicion = null!;

    [Parameter]
    [EditorRequired]
    public OLaboral oferta { get; set; } = new OLaboral();

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback Cancelar { get; set; }

    [Parameter]
    [EditorRequired]
    public string botonTexto { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public string IdOferta { get; set; }


    public bool formularioPostOk { get; set; }

    string token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c3VhcmlvIjoiTGF1cmEiLCJyb2wiOiJBZG1pbiIsImVzdGFkbyI6IkFjdGl2byIsImV4cCI6MTcxMjYxMTYxNH0.RNuHB9KQjW0ZvxiZSVpAyvFIRtsQ3rCBKdN4xlv8-nc";

    protected override void OnInitialized()
    {
        if (IdOferta == null)
        {
            contextoEdicion = new(oferta);
        }
        else
        {
            OLaboral existe = new OLaboral();
            existe.Area = "area";
            contextoEdicion = new(existe);
        }

    }

    private async Task AntesDeNavegarInternamente(LocationChangingContext contexto)
    {
        var formularioModificado = contextoEdicion.IsModified();

        if (!formularioModificado || formularioPostOk)
        {
            return;
        }

        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmacion",
                Text = "Desea abandonar esta pantalla? Perdera los cambios",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
            return;

        contexto.PreventNavigation();
    }
}